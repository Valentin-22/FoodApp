{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","Math","round","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iQAqBeA,EAjBA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxC,OACE,sBAAKC,UAAWC,IAAMC,OAAtB,UACE,6BAAKN,IACL,2CAAcO,KAAKC,MAAMP,MACzB,+BACG,IADH,eAGGE,EAAYM,KAAI,SAACC,GAAD,OACf,6BAAKA,EAAWC,aAGpB,qBAAKP,UAAWC,IAAMH,MAAOU,IAAKV,EAAOW,IAAI,SC0DpCC,MApEf,WAGE,IAGA,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,WAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAKAC,qBAAU,WACRC,MACC,CAACH,IAIJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAK,0CAESL,EAFT,mBAjBf,WAiBe,oBAhBd,qCAeG,cACXM,EADW,gBAKEA,EAASC,OALX,OAKXC,EALW,OAMjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAPA,2CAAH,qDAoBhB,OAEE,cADA,CACA,OAAKzB,UAAU,MAAf,UACE,uBAAM4B,SATQ,SAACC,GACjBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAMmBf,UAAU,cAArC,UACE,uBACEA,UAAU,aACV+B,KAAK,OACLC,MAAOlB,EACPmB,SAlBa,SAACJ,GACpBd,EAAUc,EAAEK,OAAOF,UAmBf,wBAAQhC,UAAU,gBAAgB+B,KAAK,SAAvC,uBAIF,qBAAK/B,UAAU,UAAf,SACGY,EAAQP,KAAI,SAACH,GAAD,OACX,cAAC,EAAD,CAEEN,MAAOM,EAAOA,OAAOiC,MACrBrC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,YAC3BF,SAAUK,EAAOA,OAAOL,UAJnBK,EAAOA,OAAOiC,gBClDhBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.4d8dcecc.chunk.js","sourcesContent":["import React from 'react'\r\nimport style from './recipe.module.css'\r\n\r\n//organize and display the fetched data from recipe in app.js\r\nconst Recipe = ({ title, calories, image, ingredients }) => {\r\n  return (\r\n    <div className={style.recipe}>\r\n      <h1>{title}</h1>\r\n      <p>Calories: {Math.round(calories)}</p>\r\n      <ol>\r\n        {' '}\r\n        Ingredients:\r\n        {ingredients.map((ingredient) => (\r\n          <li>{ingredient.text}</li>\r\n        ))}\r\n      </ol>\r\n      <img className={style.image} src={image} alt='' />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Recipe\r\n","// tutorial source https://www.youtube.com/watch?v=U9T6YkEDkMo\n\nimport './App.css'\nimport Recipe from './Recipe'\nimport React, { useEffect, useState } from 'react'\n\nfunction App() {\n  // was originaly const App = () => { but i like function more, also wanted to test if it worked the same\n  //this function app executes all the code inside & returns the stuff at the bottom\n  const APP_ID = 'bb83b954'\n  const APP_KEY = '477ecfca93a1f67c544f4fd7ae8f03fb'\n  // defining variables\n  const [recipes, setRecipes] = useState([]) //data gets collected or its found here somehow, for wwat i understood\n  const [search, setSearch] = useState('')\n  const [query, setQuery] = useState('chicken') //the default query/starting one is \"chicken\"\n\n  //make a request\n  //every time our page re-renders itself usefect is a function that's gonna run,\n  //you can modify/select how many times and when its going to render again adding [] makes it run only once\n  useEffect(() => {\n    getRecipes()\n  }, [query])\n\n  // only when the query changes, useEffect is gonna run\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      //GET request using our app id & key & modified query, fetching the data, waiting & organizing/formating the data in a json\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`,\n    )\n    const data = await response.json()\n    setRecipes(data.hits)\n    console.log(data.hits)\n  }\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value)\n  }\n\n  const getSearch = (e) => {\n    e.preventDefault() // prevents the page from being stuck on the default query \"chicken\"\n    setQuery(search)\n    setSearch('') //makes the search bar go blank after you type something\n  }\n\n  return (\n    //here starts the return from the function app\n    <div className='App'>\n      <form onSubmit={getSearch} className='search-form'>\n        <input\n          className='search-bar'\n          type='text'\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className='search-button' type='submit'>\n          Search\n        </button>\n      </form>\n      <div className='recipes'>\n        {recipes.map((recipe) => (\n          <Recipe //passing data & organizing from const [recipes, setRecipes] = useState([])\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            calories={recipe.recipe.calories}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1nV33\",\"image\":\"recipe_image__1blPB\"};"],"sourceRoot":""}